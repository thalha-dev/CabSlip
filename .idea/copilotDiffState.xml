<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/dev/thalha/cabslip/data/dao/ReceiptDao.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/dev/thalha/cabslip/data/dao/ReceiptDao.kt" />
              <option name="originalContent" value="package dev.thalha.cabslip.data.dao&#10;&#10;import androidx.room.*&#10;import dev.thalha.cabslip.data.entity.Receipt&#10;import kotlinx.coroutines.flow.Flow&#10;&#10;@Dao&#10;interface ReceiptDao {&#10;    @Query(&quot;SELECT * FROM receipts ORDER BY tripStartDate DESC&quot;)&#10;    fun getAllReceipts(): Flow&lt;List&lt;Receipt&gt;&gt;&#10;&#10;    @Query(&quot;SELECT * FROM receipts ORDER BY tripStartDate DESC LIMIT :limit&quot;)&#10;    fun getRecentReceipts(limit: Int): Flow&lt;List&lt;Receipt&gt;&gt;&#10;&#10;    @Query(&quot;SELECT * FROM receipts WHERE receiptId = :id&quot;)&#10;    suspend fun getReceiptById(id: String): Receipt?&#10;&#10;    @Query(&quot;&quot;&quot;&#10;        SELECT * FROM receipts &#10;        WHERE driverName LIKE '%' || :query || '%' &#10;        OR receiptId LIKE '%' || :query || '%' &#10;        OR destination LIKE '%' || :query || '%'&#10;        ORDER BY tripStartDate DESC&#10;    &quot;&quot;&quot;)&#10;    fun searchReceipts(query: String): Flow&lt;List&lt;Receipt&gt;&gt;&#10;&#10;    @Query(&quot;&quot;&quot;&#10;        SELECT * FROM receipts &#10;        WHERE tripStartDate &gt;= :fromDate AND tripStartDate &lt;= :toDate&#10;        ORDER BY tripStartDate DESC&#10;    &quot;&quot;&quot;)&#10;    fun filterByDateRange(fromDate: Long, toDate: Long): Flow&lt;List&lt;Receipt&gt;&gt;&#10;&#10;    // Pagination methods&#10;    @Query(&quot;SELECT * FROM receipts ORDER BY tripStartDate DESC LIMIT :limit OFFSET :offset&quot;)&#10;    suspend fun getReceiptsPaginated(limit: Int, offset: Int): List&lt;Receipt&gt;&#10;&#10;    @Query(&quot;&quot;&quot;&#10;        SELECT * FROM receipts &#10;        WHERE driverName LIKE '%' || :query || '%' &#10;        OR receiptId LIKE '%' || :query || '%' &#10;        OR destination LIKE '%' || :query || '%'&#10;        ORDER BY tripStartDate DESC LIMIT :limit OFFSET :offset&#10;    &quot;&quot;&quot;)&#10;    suspend fun searchReceiptsPaginated(query: String, limit: Int, offset: Int): List&lt;Receipt&gt;&#10;&#10;    @Query(&quot;&quot;&quot;&#10;        SELECT * FROM receipts &#10;        WHERE tripStartDate &gt;= :fromDate AND tripStartDate &lt;= :toDate&#10;        ORDER BY tripStartDate DESC LIMIT :limit OFFSET :offset&#10;    &quot;&quot;&quot;)&#10;    suspend fun filterByDateRangePaginated(fromDate: Long, toDate: Long, limit: Int, offset: Int): List&lt;Receipt&gt;&#10;&#10;    @Query(&quot;SELECT COUNT(*) FROM receipts&quot;)&#10;    suspend fun getTotalReceiptsCount(): Int&#10;&#10;    @Query(&quot;&quot;&quot;&#10;        SELECT COUNT(*) FROM receipts &#10;        WHERE driverName LIKE '%' || :query || '%' &#10;        OR receiptId LIKE '%' || :query || '%' &#10;        OR destination LIKE '%' || :query || '%'&#10;    &quot;&quot;&quot;)&#10;    suspend fun getSearchResultsCount(query: String): Int&#10;&#10;    @Query(&quot;&quot;&quot;&#10;        SELECT COUNT(*) FROM receipts &#10;        WHERE tripStartDate &gt;= :fromDate AND tripStartDate &lt;= :toDate&#10;    &quot;&quot;&quot;)&#10;    suspend fun getDateRangeResultsCount(fromDate: Long, toDate: Long): Int&#10;&#10;    @Insert&#10;    suspend fun insertReceipt(receipt: Receipt)&#10;&#10;    @Update&#10;    suspend fun updateReceipt(receipt: Receipt)&#10;&#10;    @Delete&#10;    suspend fun deleteReceipt(receipt: Receipt)&#10;&#10;    @Query(&quot;SELECT COUNT(*) FROM receipts WHERE receiptId = :receiptId&quot;)&#10;    suspend fun checkReceiptIdExists(receiptId: String): Int&#10;}&#10;" />
              <option name="updatedContent" value="package dev.thalha.cabslip.data.dao&#10;&#10;import androidx.room.*&#10;import dev.thalha.cabslip.data.entity.Receipt&#10;import kotlinx.coroutines.flow.Flow&#10;&#10;@Dao&#10;interface ReceiptDao {&#10;    @Query(&quot;SELECT * FROM receipts ORDER BY tripStartDate DESC&quot;)&#10;    fun getAllReceipts(): Flow&lt;List&lt;Receipt&gt;&gt;&#10;&#10;    @Query(&quot;SELECT * FROM receipts ORDER BY tripStartDate DESC LIMIT :limit&quot;)&#10;    fun getRecentReceipts(limit: Int): Flow&lt;List&lt;Receipt&gt;&gt;&#10;&#10;    @Query(&quot;SELECT * FROM receipts WHERE receiptId = :id&quot;)&#10;    suspend fun getReceiptById(id: String): Receipt?&#10;&#10;    @Query(&quot;&quot;&quot;&#10;        SELECT * FROM receipts &#10;        WHERE driverName LIKE '%' || :query || '%' &#10;        OR receiptId LIKE '%' || :query || '%' &#10;        OR destination LIKE '%' || :query || '%'&#10;        ORDER BY tripStartDate DESC&#10;    &quot;&quot;&quot;)&#10;    fun searchReceipts(query: String): Flow&lt;List&lt;Receipt&gt;&gt;&#10;&#10;    @Query(&quot;&quot;&quot;&#10;        SELECT * FROM receipts &#10;        WHERE tripStartDate &gt;= :fromDate AND tripStartDate &lt;= :toDate&#10;        ORDER BY tripStartDate DESC&#10;    &quot;&quot;&quot;)&#10;    fun filterByDateRange(fromDate: Long, toDate: Long): Flow&lt;List&lt;Receipt&gt;&gt;&#10;&#10;    // Pagination methods&#10;    @Query(&quot;SELECT * FROM receipts ORDER BY tripStartDate DESC LIMIT :limit OFFSET :offset&quot;)&#10;    suspend fun getReceiptsPaginated(limit: Int, offset: Int): List&lt;Receipt&gt;&#10;&#10;    @Query(&quot;&quot;&quot;&#10;        SELECT * FROM receipts &#10;        WHERE driverName LIKE '%' || :query || '%' &#10;        OR receiptId LIKE '%' || :query || '%' &#10;        OR destination LIKE '%' || :query || '%'&#10;        ORDER BY tripStartDate DESC LIMIT :limit OFFSET :offset&#10;    &quot;&quot;&quot;)&#10;    suspend fun searchReceiptsPaginated(query: String, limit: Int, offset: Int): List&lt;Receipt&gt;&#10;&#10;    @Query(&quot;&quot;&quot;&#10;        SELECT * FROM receipts &#10;        WHERE tripStartDate &gt;= :fromDate AND tripStartDate &lt;= :toDate&#10;        ORDER BY tripStartDate DESC LIMIT :limit OFFSET :offset&#10;    &quot;&quot;&quot;)&#10;    suspend fun filterByDateRangePaginated(fromDate: Long, toDate: Long, limit: Int, offset: Int): List&lt;Receipt&gt;&#10;&#10;    @Query(&quot;SELECT COUNT(*) FROM receipts&quot;)&#10;    suspend fun getTotalReceiptsCount(): Int&#10;&#10;    @Query(&quot;&quot;&quot;&#10;        SELECT COUNT(*) FROM receipts &#10;        WHERE driverName LIKE '%' || :query || '%' &#10;        OR receiptId LIKE '%' || :query || '%' &#10;        OR destination LIKE '%' || :query || '%'&#10;    &quot;&quot;&quot;)&#10;    suspend fun getSearchResultsCount(query: String): Int&#10;&#10;    @Query(&quot;&quot;&quot;&#10;        SELECT COUNT(*) FROM receipts &#10;        WHERE tripStartDate &gt;= :fromDate AND tripStartDate &lt;= :toDate&#10;    &quot;&quot;&quot;)&#10;    suspend fun getDateRangeResultsCount(fromDate: Long, toDate: Long): Int&#10;&#10;    // Stats methods for dashboard&#10;    @Query(&quot;SELECT SUM(totalKm) FROM receipts&quot;)&#10;    suspend fun getTotalKilometers(): Double?&#10;&#10;    @Query(&quot;SELECT SUM(totalFee) FROM receipts&quot;)&#10;    suspend fun getTotalRevenue(): Double?&#10;&#10;    @Insert&#10;    suspend fun insertReceipt(receipt: Receipt)&#10;&#10;    @Update&#10;    suspend fun updateReceipt(receipt: Receipt)&#10;&#10;    @Delete&#10;    suspend fun deleteReceipt(receipt: Receipt)&#10;&#10;    @Query(&quot;SELECT COUNT(*) FROM receipts WHERE receiptId = :receiptId&quot;)&#10;    suspend fun checkReceiptIdExists(receiptId: String): Int&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/dev/thalha/cabslip/data/repository/CabSlipRepository.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/dev/thalha/cabslip/data/repository/CabSlipRepository.kt" />
              <option name="originalContent" value="package dev.thalha.cabslip.data.repository&#10;&#10;import dev.thalha.cabslip.data.dao.CabInfoDao&#10;import dev.thalha.cabslip.data.dao.ReceiptDao&#10;import dev.thalha.cabslip.data.entity.CabInfo&#10;import dev.thalha.cabslip.data.entity.Receipt&#10;import dev.thalha.cabslip.utils.ReceiptIdGenerator&#10;import kotlinx.coroutines.flow.Flow&#10;&#10;class CabSlipRepository(&#10;    private val cabInfoDao: CabInfoDao,&#10;    private val receiptDao: ReceiptDao&#10;) {&#10;    // CabInfo operations&#10;    fun getCabInfo(): Flow&lt;CabInfo?&gt; = cabInfoDao.getCabInfo()&#10;&#10;    suspend fun getCabInfoSync(): CabInfo? = cabInfoDao.getCabInfoSync()&#10;&#10;    suspend fun insertOrUpdateCabInfo(cabInfo: CabInfo) {&#10;        cabInfoDao.insertOrUpdateCabInfo(cabInfo)&#10;    }&#10;&#10;    // Receipt operations&#10;    fun getAllReceipts(): Flow&lt;List&lt;Receipt&gt;&gt; = receiptDao.getAllReceipts()&#10;&#10;    fun getRecentReceipts(limit: Int = 6): Flow&lt;List&lt;Receipt&gt;&gt; = receiptDao.getRecentReceipts(limit)&#10;&#10;    // Pagination methods&#10;    suspend fun getReceiptsPaginated(limit: Int, offset: Int): List&lt;Receipt&gt; =&#10;        receiptDao.getReceiptsPaginated(limit, offset)&#10;&#10;    suspend fun searchReceiptsPaginated(query: String, limit: Int, offset: Int): List&lt;Receipt&gt; =&#10;        receiptDao.searchReceiptsPaginated(query, limit, offset)&#10;&#10;    suspend fun filterByDateRangePaginated(fromDate: Long, toDate: Long, limit: Int, offset: Int): List&lt;Receipt&gt; =&#10;        receiptDao.filterByDateRangePaginated(fromDate, toDate, limit, offset)&#10;&#10;    suspend fun getTotalReceiptsCount(): Int = receiptDao.getTotalReceiptsCount()&#10;&#10;    suspend fun getSearchResultsCount(query: String): Int = receiptDao.getSearchResultsCount(query)&#10;&#10;    suspend fun getDateRangeResultsCount(fromDate: Long, toDate: Long): Int =&#10;        receiptDao.getDateRangeResultsCount(fromDate, toDate)&#10;&#10;    suspend fun getReceiptById(id: String): Receipt? = receiptDao.getReceiptById(id)&#10;&#10;    fun searchReceipts(query: String): Flow&lt;List&lt;Receipt&gt;&gt; = receiptDao.searchReceipts(query)&#10;&#10;    fun filterByDateRange(fromDate: Long, toDate: Long): Flow&lt;List&lt;Receipt&gt;&gt; =&#10;        receiptDao.filterByDateRange(fromDate, toDate)&#10;&#10;    suspend fun insertReceipt(receipt: Receipt) {&#10;        receiptDao.insertReceipt(receipt)&#10;    }&#10;&#10;    suspend fun updateReceipt(receipt: Receipt) {&#10;        receiptDao.updateReceipt(receipt)&#10;    }&#10;&#10;    suspend fun deleteReceipt(receipt: Receipt) {&#10;        receiptDao.deleteReceipt(receipt)&#10;    }&#10;&#10;    suspend fun generateUniqueReceiptId(): String {&#10;        var receiptId: String&#10;        do {&#10;            receiptId = ReceiptIdGenerator.generateReceiptId()&#10;        } while (receiptDao.checkReceiptIdExists(receiptId) &gt; 0)&#10;        return receiptId&#10;    }&#10;&#10;    // Helper function to calculate receipt totals&#10;    fun calculateReceiptTotals(&#10;        pricePerKm: Double,&#10;        totalKm: Double,&#10;        waitingChargePerHr: Double,&#10;        waitingHrs: Double,&#10;        tollParking: Double,&#10;        bata: Double&#10;    ): Triple&lt;Double, Double, Double&gt; { // baseFare, waitingFee, totalFee&#10;        val baseFare = pricePerKm * totalKm&#10;        val waitingFee = waitingChargePerHr * waitingHrs&#10;        val totalFee = baseFare + tollParking + bata + waitingFee&#10;        return Triple(baseFare, waitingFee, totalFee)&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package dev.thalha.cabslip.data.repository&#10;&#10;import dev.thalha.cabslip.data.dao.CabInfoDao&#10;import dev.thalha.cabslip.data.dao.ReceiptDao&#10;import dev.thalha.cabslip.data.entity.CabInfo&#10;import dev.thalha.cabslip.data.entity.Receipt&#10;import dev.thalha.cabslip.utils.ReceiptIdGenerator&#10;import kotlinx.coroutines.flow.Flow&#10;&#10;class CabSlipRepository(&#10;    private val cabInfoDao: CabInfoDao,&#10;    private val receiptDao: ReceiptDao&#10;) {&#10;    // CabInfo operations&#10;    fun getCabInfo(): Flow&lt;CabInfo?&gt; = cabInfoDao.getCabInfo()&#10;&#10;    suspend fun getCabInfoSync(): CabInfo? = cabInfoDao.getCabInfoSync()&#10;&#10;    suspend fun insertOrUpdateCabInfo(cabInfo: CabInfo) {&#10;        cabInfoDao.insertOrUpdateCabInfo(cabInfo)&#10;    }&#10;&#10;    // Receipt operations&#10;    fun getAllReceipts(): Flow&lt;List&lt;Receipt&gt;&gt; = receiptDao.getAllReceipts()&#10;&#10;    fun getRecentReceipts(limit: Int = 6): Flow&lt;List&lt;Receipt&gt;&gt; = receiptDao.getRecentReceipts(limit)&#10;&#10;    // Pagination methods&#10;    suspend fun getReceiptsPaginated(limit: Int, offset: Int): List&lt;Receipt&gt; =&#10;        receiptDao.getReceiptsPaginated(limit, offset)&#10;&#10;    suspend fun searchReceiptsPaginated(query: String, limit: Int, offset: Int): List&lt;Receipt&gt; =&#10;        receiptDao.searchReceiptsPaginated(query, limit, offset)&#10;&#10;    suspend fun filterByDateRangePaginated(fromDate: Long, toDate: Long, limit: Int, offset: Int): List&lt;Receipt&gt; =&#10;        receiptDao.filterByDateRangePaginated(fromDate, toDate, limit, offset)&#10;&#10;    suspend fun getTotalReceiptsCount(): Int = receiptDao.getTotalReceiptsCount()&#10;&#10;    suspend fun getSearchResultsCount(query: String): Int = receiptDao.getSearchResultsCount(query)&#10;&#10;    suspend fun getDateRangeResultsCount(fromDate: Long, toDate: Long): Int =&#10;        receiptDao.getDateRangeResultsCount(fromDate, toDate)&#10;&#10;    // Stats methods for dashboard&#10;    suspend fun getTotalKilometers(): Double = receiptDao.getTotalKilometers() ?: 0.0&#10;&#10;    suspend fun getTotalRevenue(): Double = receiptDao.getTotalRevenue() ?: 0.0&#10;&#10;    suspend fun getReceiptById(id: String): Receipt? = receiptDao.getReceiptById(id)&#10;&#10;    fun searchReceipts(query: String): Flow&lt;List&lt;Receipt&gt;&gt; = receiptDao.searchReceipts(query)&#10;&#10;    fun filterByDateRange(fromDate: Long, toDate: Long): Flow&lt;List&lt;Receipt&gt;&gt; =&#10;        receiptDao.filterByDateRange(fromDate, toDate)&#10;&#10;    suspend fun insertReceipt(receipt: Receipt) {&#10;        receiptDao.insertReceipt(receipt)&#10;    }&#10;&#10;    suspend fun updateReceipt(receipt: Receipt) {&#10;        receiptDao.updateReceipt(receipt)&#10;    }&#10;&#10;    suspend fun deleteReceipt(receipt: Receipt) {&#10;        receiptDao.deleteReceipt(receipt)&#10;    }&#10;&#10;    suspend fun generateUniqueReceiptId(): String {&#10;        var receiptId: String&#10;        do {&#10;            receiptId = ReceiptIdGenerator.generateReceiptId()&#10;        } while (receiptDao.checkReceiptIdExists(receiptId) &gt; 0)&#10;        return receiptId&#10;    }&#10;&#10;    // Helper function to calculate receipt totals&#10;    fun calculateReceiptTotals(&#10;        pricePerKm: Double,&#10;        totalKm: Double,&#10;        waitingChargePerHr: Double,&#10;        waitingHrs: Double,&#10;        tollParking: Double,&#10;        bata: Double&#10;    ): Triple&lt;Double, Double, Double&gt; { // baseFare, waitingFee, totalFee&#10;        val baseFare = pricePerKm * totalKm&#10;        val waitingFee = waitingChargePerHr * waitingHrs&#10;        val totalFee = baseFare + tollParking + bata + waitingFee&#10;        return Triple(baseFare, waitingFee, totalFee)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/dev/thalha/cabslip/ui/screens/HomeScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/dev/thalha/cabslip/ui/screens/HomeScreen.kt" />
              <option name="originalContent" value="package dev.thalha.cabslip.ui.screens&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.CheckCircle&#10;import androidx.compose.material.icons.filled.Warning&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import dev.thalha.cabslip.data.database.CabSlipDatabase&#10;import dev.thalha.cabslip.data.entity.Receipt&#10;import dev.thalha.cabslip.data.repository.CabSlipRepository&#10;import java.text.SimpleDateFormat&#10;import java.util.*&#10;&#10;@Composable&#10;fun HomeScreen(&#10;    onReceiptClick: (String) -&gt; Unit&#10;) {&#10;    val context = LocalContext.current&#10;    val database = CabSlipDatabase.getDatabase(context)&#10;    val repository = CabSlipRepository(database.cabInfoDao(), database.receiptDao())&#10;&#10;    val recentReceipts by repository.getRecentReceipts(6).collectAsState(initial = emptyList())&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;    ) {&#10;        Text(&#10;            text = &quot;Recent Receipts&quot;,&#10;            fontSize = 24.sp,&#10;            fontWeight = FontWeight.Bold&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        if (recentReceipts.isEmpty()) {&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = MaterialTheme.colorScheme.surfaceVariant&#10;                )&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(24.dp),&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    Text(&#10;                        text = &quot;No receipts yet&quot;,&#10;                        fontSize = 18.sp,&#10;                        fontWeight = FontWeight.Medium&#10;                    )&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;                    Text(&#10;                        text = &quot;Tap the + button to create your first receipt&quot;,&#10;                        fontSize = 14.sp,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;            }&#10;        } else {&#10;            LazyColumn(&#10;                verticalArrangement = Arrangement.spacedBy(8.dp)&#10;            ) {&#10;                items(recentReceipts) { receipt -&gt;&#10;                    ReceiptCard(&#10;                        receipt = receipt,&#10;                        onClick = { onReceiptClick(receipt.receiptId) }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ReceiptCard(&#10;    receipt: Receipt,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    val dateFormat = SimpleDateFormat(&quot;MMM dd, yyyy&quot;, Locale.getDefault())&#10;    val date = Date(receipt.tripStartDate)&#10;&#10;    Card(&#10;        onClick = onClick,&#10;        modifier = Modifier.fillMaxWidth()&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp)&#10;        ) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.Top&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.weight(1f)&#10;                ) {&#10;                    Text(&#10;                        text = receipt.receiptId,&#10;                        fontSize = 16.sp,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;                    Spacer(modifier = Modifier.height(4.dp))&#10;                    Text(&#10;                        text = &quot;${receipt.boardingLocation} → ${receipt.destination}&quot;,&#10;                        fontSize = 14.sp,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                    Spacer(modifier = Modifier.height(4.dp))&#10;                    Text(&#10;                        text = dateFormat.format(date),&#10;                        fontSize = 12.sp,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;&#10;                Column(&#10;                    horizontalAlignment = Alignment.End&#10;                ) {&#10;                    Text(&#10;                        text = &quot;₹${String.format(&quot;%.2f&quot;, receipt.totalFee)}&quot;,&#10;                        fontSize = 16.sp,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = MaterialTheme.colorScheme.primary&#10;                    )&#10;                    Spacer(modifier = Modifier.height(4.dp))&#10;                    Icon(&#10;                        imageVector = if (receipt.ownerSignaturePath != null)&#10;                            Icons.Default.CheckCircle else Icons.Default.Warning,&#10;                        contentDescription = if (receipt.ownerSignaturePath != null)&#10;                            &quot;Signed&quot; else &quot;No signature&quot;,&#10;                        tint = if (receipt.ownerSignaturePath != null)&#10;                            MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.error,&#10;                        modifier = Modifier.size(16.dp)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package dev.thalha.cabslip.ui.screens&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.CheckCircle&#10;import androidx.compose.material.icons.filled.Warning&#10;import androidx.compose.material.icons.filled.Receipt&#10;import androidx.compose.material.icons.filled.DriveEta&#10;import androidx.compose.material.icons.filled.AttachMoney&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import dev.thalha.cabslip.data.database.CabSlipDatabase&#10;import dev.thalha.cabslip.data.entity.Receipt&#10;import dev.thalha.cabslip.data.repository.CabSlipRepository&#10;import java.text.SimpleDateFormat&#10;import java.util.*&#10;&#10;// Data class for stats summary&#10;data class StatsSummary(&#10;    val totalReceipts: Int = 0,&#10;    val totalKilometers: Double = 0.0,&#10;    val totalRevenue: Double = 0.0&#10;)&#10;&#10;@Composable&#10;fun HomeScreen(&#10;    onReceiptClick: (String) -&gt; Unit&#10;) {&#10;    val context = LocalContext.current&#10;    val database = CabSlipDatabase.getDatabase(context)&#10;    val repository = CabSlipRepository(database.cabInfoDao(), database.receiptDao())&#10;&#10;    val recentReceipts by repository.getRecentReceipts(3).collectAsState(initial = emptyList())&#10;    var statsLoading by remember { mutableStateOf(true) }&#10;    var statsSummary by remember { mutableStateOf(StatsSummary()) }&#10;&#10;    // Load stats data&#10;    LaunchedEffect(Unit) {&#10;        try {&#10;            val receiptsCount = repository.getTotalReceiptsCount()&#10;            val totalKm = repository.getTotalKilometers()&#10;            val totalRevenue = repository.getTotalRevenue()&#10;&#10;            statsSummary = StatsSummary(&#10;                totalReceipts = receiptsCount,&#10;                totalKilometers = totalKm,&#10;                totalRevenue = totalRevenue&#10;            )&#10;        } catch (e: Exception) {&#10;            // Handle error silently, keep default values&#10;        } finally {&#10;            statsLoading = false&#10;        }&#10;    }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;    ) {&#10;        Text(&#10;            text = &quot;Dashboard&quot;,&#10;            fontSize = 24.sp,&#10;            fontWeight = FontWeight.Bold&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        // Stats Summary Section&#10;        Card(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            colors = CardDefaults.cardColors(&#10;                containerColor = MaterialTheme.colorScheme.primaryContainer&#10;            )&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.padding(16.dp)&#10;            ) {&#10;                Text(&#10;                    text = &quot;Business Summary&quot;,&#10;                    fontSize = 18.sp,&#10;                    fontWeight = FontWeight.SemiBold,&#10;                    color = MaterialTheme.colorScheme.onPrimaryContainer&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(12.dp))&#10;&#10;                if (statsLoading) {&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .height(80.dp),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        CircularProgressIndicator(&#10;                            modifier = Modifier.size(24.dp),&#10;                            strokeWidth = 2.dp&#10;                        )&#10;                    }&#10;                } else {&#10;                    Row(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        horizontalArrangement = Arrangement.SpaceEvenly&#10;                    ) {&#10;                        // Total Receipts&#10;                        StatCard(&#10;                            icon = Icons.Default.Receipt,&#10;                            value = statsSummary.totalReceipts.toString(),&#10;                            label = &quot;Receipts&quot;,&#10;                            modifier = Modifier.weight(1f)&#10;                        )&#10;&#10;                        // Total Kilometers&#10;                        StatCard(&#10;                            icon = Icons.Default.DriveEta,&#10;                            value = &quot;${String.format(&quot;%.1f&quot;, statsSummary.totalKilometers)} km&quot;,&#10;                            label = &quot;Distance&quot;,&#10;                            modifier = Modifier.weight(1f)&#10;                        )&#10;&#10;                        // Total Revenue&#10;                        StatCard(&#10;                            icon = Icons.Default.AttachMoney,&#10;                            value = &quot;₹${String.format(&quot;%.0f&quot;, statsSummary.totalRevenue)}&quot;,&#10;                            label = &quot;Revenue&quot;,&#10;                            modifier = Modifier.weight(1f)&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(20.dp))&#10;&#10;        // Recent Receipts Section&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Text(&#10;                text = &quot;Recent Receipts&quot;,&#10;                fontSize = 20.sp,&#10;                fontWeight = FontWeight.SemiBold&#10;            )&#10;&#10;            if (recentReceipts.isNotEmpty()) {&#10;                TextButton(&#10;                    onClick = { /* Navigate to receipts screen */ }&#10;                ) {&#10;                    Text(&quot;View All&quot;)&#10;                }&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(12.dp))&#10;&#10;        if (recentReceipts.isEmpty()) {&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = MaterialTheme.colorScheme.surfaceVariant&#10;                )&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(24.dp),&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    Text(&#10;                        text = &quot;No receipts yet&quot;,&#10;                        fontSize = 18.sp,&#10;                        fontWeight = FontWeight.Medium&#10;                    )&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;                    Text(&#10;                        text = &quot;Tap the + button to create your first receipt&quot;,&#10;                        fontSize = 14.sp,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;            }&#10;        } else {&#10;            LazyColumn(&#10;                verticalArrangement = Arrangement.spacedBy(8.dp)&#10;            ) {&#10;                items(recentReceipts) { receipt -&gt;&#10;                    ReceiptCard(&#10;                        receipt = receipt,&#10;                        onClick = { onReceiptClick(receipt.receiptId) }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun StatCard(&#10;    icon: androidx.compose.ui.graphics.vector.ImageVector,&#10;    value: String,&#10;    label: String,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Column(&#10;        modifier = modifier.padding(horizontal = 8.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        Icon(&#10;            imageVector = icon,&#10;            contentDescription = null,&#10;            tint = MaterialTheme.colorScheme.onPrimaryContainer,&#10;            modifier = Modifier.size(24.dp)&#10;        )&#10;        Spacer(modifier = Modifier.height(4.dp))&#10;        Text(&#10;            text = value,&#10;            fontSize = 16.sp,&#10;            fontWeight = FontWeight.Bold,&#10;            color = MaterialTheme.colorScheme.onPrimaryContainer&#10;        )&#10;        Text(&#10;            text = label,&#10;            fontSize = 12.sp,&#10;            color = MaterialTheme.colorScheme.onPrimaryContainer.copy(alpha = 0.7f)&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ReceiptCard(&#10;    receipt: Receipt,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    val dateFormat = SimpleDateFormat(&quot;MMM dd, yyyy&quot;, Locale.getDefault())&#10;    val date = Date(receipt.tripStartDate)&#10;&#10;    Card(&#10;        onClick = onClick,&#10;        modifier = Modifier.fillMaxWidth()&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp)&#10;        ) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.Top&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.weight(1f)&#10;                ) {&#10;                    Text(&#10;                        text = receipt.receiptId,&#10;                        fontSize = 16.sp,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;                    Spacer(modifier = Modifier.height(4.dp))&#10;                    Text(&#10;                        text = &quot;${receipt.boardingLocation} → ${receipt.destination}&quot;,&#10;                        fontSize = 14.sp,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                    Spacer(modifier = Modifier.height(4.dp))&#10;                    Text(&#10;                        text = dateFormat.format(date),&#10;                        fontSize = 12.sp,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;&#10;                Column(&#10;                    horizontalAlignment = Alignment.End&#10;                ) {&#10;                    Text(&#10;                        text = &quot;₹${String.format(&quot;%.2f&quot;, receipt.totalFee)}&quot;,&#10;                        fontSize = 16.sp,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = MaterialTheme.colorScheme.primary&#10;                    )&#10;                    Spacer(modifier = Modifier.height(4.dp))&#10;                    Icon(&#10;                        imageVector = if (receipt.ownerSignaturePath != null)&#10;                            Icons.Default.CheckCircle else Icons.Default.Warning,&#10;                        contentDescription = if (receipt.ownerSignaturePath != null)&#10;                            &quot;Signed&quot; else &quot;No signature&quot;,&#10;                        tint = if (receipt.ownerSignaturePath != null)&#10;                            MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.error,&#10;                        modifier = Modifier.size(16.dp)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/dev/thalha/cabslip/ui/screens/ReceiptsScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/dev/thalha/cabslip/ui/screens/ReceiptsScreen.kt" />
              <option name="originalContent" value="package dev.thalha.cabslip.ui.screens&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Search&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import dev.thalha.cabslip.data.database.CabSlipDatabase&#10;import dev.thalha.cabslip.data.repository.CabSlipRepository&#10;&#10;@Composable&#10;fun ReceiptsScreen(&#10;    onReceiptClick: (String) -&gt; Unit&#10;) {&#10;    val context = LocalContext.current&#10;    val database = CabSlipDatabase.getDatabase(context)&#10;    val repository = CabSlipRepository(database.cabInfoDao(), database.receiptDao())&#10;&#10;    var searchQuery by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    val receipts by if (searchQuery.isBlank()) {&#10;        repository.getAllReceipts().collectAsState(initial = emptyList())&#10;    } else {&#10;        repository.searchReceipts(searchQuery).collectAsState(initial = emptyList())&#10;    }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;    ) {&#10;        Text(&#10;            text = &quot;All Receipts&quot;,&#10;            fontSize = 24.sp,&#10;            fontWeight = FontWeight.Bold&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        OutlinedTextField(&#10;            value = searchQuery,&#10;            onValueChange = { searchQuery = it },&#10;            label = { Text(&quot;Search receipts...&quot;) },&#10;            leadingIcon = { Icon(Icons.Default.Search, contentDescription = &quot;Search&quot;) },&#10;            modifier = Modifier.fillMaxWidth(),&#10;            singleLine = true&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        if (receipts.isEmpty()) {&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = MaterialTheme.colorScheme.surfaceVariant&#10;                )&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(24.dp)&#10;                ) {&#10;                    Text(&#10;                        text = if (searchQuery.isBlank()) &quot;No receipts found&quot; else &quot;No matching receipts&quot;,&#10;                        fontSize = 18.sp,&#10;                        fontWeight = FontWeight.Medium&#10;                    )&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;                    Text(&#10;                        text = if (searchQuery.isBlank())&#10;                            &quot;Create your first receipt using the + button&quot;&#10;                        else&#10;                            &quot;Try adjusting your search terms&quot;,&#10;                        fontSize = 14.sp,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;            }&#10;        } else {&#10;            LazyColumn(&#10;                verticalArrangement = Arrangement.spacedBy(8.dp)&#10;            ) {&#10;                items(receipts) { receipt -&gt;&#10;                    ReceiptCard(&#10;                        receipt = receipt,&#10;                        onClick = { onReceiptClick(receipt.receiptId) }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package dev.thalha.cabslip.ui.screens&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Search&#10;import androidx.compose.material.icons.filled.DateRange&#10;import androidx.compose.material.icons.filled.Clear&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import dev.thalha.cabslip.data.database.CabSlipDatabase&#10;import dev.thalha.cabslip.data.repository.CabSlipRepository&#10;import java.text.SimpleDateFormat&#10;import java.util.*&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun ReceiptsScreen(&#10;    onReceiptClick: (String) -&gt; Unit&#10;) {&#10;    val context = LocalContext.current&#10;    val database = CabSlipDatabase.getDatabase(context)&#10;    val repository = CabSlipRepository(database.cabInfoDao(), database.receiptDao())&#10;&#10;    var searchQuery by remember { mutableStateOf(&quot;&quot;) }&#10;    var showDateRangePicker by remember { mutableStateOf(false) }&#10;    var selectedStartDate by remember { mutableStateOf&lt;Long?&gt;(null) }&#10;    var selectedEndDate by remember { mutableStateOf&lt;Long?&gt;(null) }&#10;    var isDateFilterActive by remember { mutableStateOf(false) }&#10;&#10;    val dateFormatter = remember { SimpleDateFormat(&quot;MMM dd, yyyy&quot;, Locale.getDefault()) }&#10;&#10;    val receipts by if (isDateFilterActive &amp;&amp; selectedStartDate != null &amp;&amp; selectedEndDate != null) {&#10;        repository.filterByDateRange(selectedStartDate!!, selectedEndDate!!).collectAsState(initial = emptyList())&#10;    } else if (searchQuery.isBlank()) {&#10;        repository.getAllReceipts().collectAsState(initial = emptyList())&#10;    } else {&#10;        repository.searchReceipts(searchQuery).collectAsState(initial = emptyList())&#10;    }&#10;&#10;    // Date picker states&#10;    var isSelectingStartDate by remember { mutableStateOf(true) }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;    ) {&#10;        Text(&#10;            text = &quot;All Receipts&quot;,&#10;            fontSize = 24.sp,&#10;            fontWeight = FontWeight.Bold&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        // Search field&#10;        OutlinedTextField(&#10;            value = searchQuery,&#10;            onValueChange = { &#10;                searchQuery = it&#10;                if (it.isNotBlank()) {&#10;                    isDateFilterActive = false&#10;                }&#10;            },&#10;            label = { Text(&quot;Search receipts...&quot;) },&#10;            leadingIcon = { Icon(Icons.Default.Search, contentDescription = &quot;Search&quot;) },&#10;            modifier = Modifier.fillMaxWidth(),&#10;            singleLine = true&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(12.dp))&#10;&#10;        // Date range filter section&#10;        Card(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            colors = CardDefaults.cardColors(&#10;                containerColor = if (isDateFilterActive) MaterialTheme.colorScheme.primaryContainer &#10;                else MaterialTheme.colorScheme.surface&#10;            )&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.padding(16.dp)&#10;            ) {&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Filter by Date Range&quot;,&#10;                        fontWeight = FontWeight.Medium,&#10;                        fontSize = 16.sp&#10;                    )&#10;                    &#10;                    if (isDateFilterActive) {&#10;                        IconButton(&#10;                            onClick = {&#10;                                isDateFilterActive = false&#10;                                selectedStartDate = null&#10;                                selectedEndDate = null&#10;                            }&#10;                        ) {&#10;                            Icon(&#10;                                Icons.Default.Clear,&#10;                                contentDescription = &quot;Clear date filter&quot;,&#10;                                tint = MaterialTheme.colorScheme.primary&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.SpaceBetween&#10;                ) {&#10;                    // Start date button&#10;                    OutlinedButton(&#10;                        onClick = { &#10;                            isSelectingStartDate = true&#10;                            showDateRangePicker = true&#10;                        },&#10;                        modifier = Modifier.weight(1f)&#10;                    ) {&#10;                        Icon(&#10;                            Icons.Default.DateRange,&#10;                            contentDescription = null,&#10;                            modifier = Modifier.size(18.dp)&#10;                        )&#10;                        Spacer(modifier = Modifier.width(4.dp))&#10;                        Text(&#10;                            text = selectedStartDate?.let { dateFormatter.format(Date(it)) } &#10;                                ?: &quot;Start Date&quot;,&#10;                            fontSize = 14.sp&#10;                        )&#10;                    }&#10;&#10;                    Spacer(modifier = Modifier.width(8.dp))&#10;&#10;                    // End date button&#10;                    OutlinedButton(&#10;                        onClick = { &#10;                            isSelectingStartDate = false&#10;                            showDateRangePicker = true&#10;                        },&#10;                        modifier = Modifier.weight(1f)&#10;                    ) {&#10;                        Icon(&#10;                            Icons.Default.DateRange,&#10;                            contentDescription = null,&#10;                            modifier = Modifier.size(18.dp)&#10;                        )&#10;                        Spacer(modifier = Modifier.width(4.dp))&#10;                        Text(&#10;                            text = selectedEndDate?.let { dateFormatter.format(Date(it)) } &#10;                                ?: &quot;End Date&quot;,&#10;                            fontSize = 14.sp&#10;                        )&#10;                    }&#10;                }&#10;&#10;                // Apply filter button (only show when both dates are selected)&#10;                if (selectedStartDate != null &amp;&amp; selectedEndDate != null &amp;&amp; !isDateFilterActive) {&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;                    Button(&#10;                        onClick = {&#10;                            isDateFilterActive = true&#10;                            searchQuery = &quot;&quot; // Clear search when applying date filter&#10;                        },&#10;                        modifier = Modifier.fillMaxWidth()&#10;                    ) {&#10;                        Text(&quot;Apply Date Filter&quot;)&#10;                    }&#10;                }&#10;&#10;                // Active filter indicator&#10;                if (isDateFilterActive &amp;&amp; selectedStartDate != null &amp;&amp; selectedEndDate != null) {&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;                    Text(&#10;                        text = &quot;Showing receipts from ${dateFormatter.format(Date(selectedStartDate!!))} to ${dateFormatter.format(Date(selectedEndDate!!))}&quot;,&#10;                        fontSize = 12.sp,&#10;                        color = MaterialTheme.colorScheme.primary,&#10;                        fontWeight = FontWeight.Medium&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        // Results section&#10;        if (receipts.isEmpty()) {&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = MaterialTheme.colorScheme.surfaceVariant&#10;                )&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(24.dp)&#10;                ) {&#10;                    Text(&#10;                        text = when {&#10;                            isDateFilterActive -&gt; &quot;No receipts found in date range&quot;&#10;                            searchQuery.isNotBlank() -&gt; &quot;No matching receipts&quot;&#10;                            else -&gt; &quot;No receipts found&quot;&#10;                        },&#10;                        fontSize = 18.sp,&#10;                        fontWeight = FontWeight.Medium&#10;                    )&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;                    Text(&#10;                        text = when {&#10;                            isDateFilterActive -&gt; &quot;Try selecting a different date range&quot;&#10;                            searchQuery.isNotBlank() -&gt; &quot;Try adjusting your search terms&quot;&#10;                            else -&gt; &quot;Create your first receipt using the + button&quot;&#10;                        },&#10;                        fontSize = 14.sp,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;            }&#10;        } else {&#10;            LazyColumn(&#10;                verticalArrangement = Arrangement.spacedBy(8.dp)&#10;            ) {&#10;                items(receipts) { receipt -&gt;&#10;                    ReceiptCard(&#10;                        receipt = receipt,&#10;                        onClick = { onReceiptClick(receipt.receiptId) }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    // Date Picker Dialog&#10;    if (showDateRangePicker) {&#10;        DatePickerDialog(&#10;            onDateSelected = { selectedDate -&gt;&#10;                if (isSelectingStartDate) {&#10;                    selectedStartDate = selectedDate&#10;                    // If end date is before start date, clear it&#10;                    if (selectedEndDate != null &amp;&amp; selectedDate != null &amp;&amp; selectedEndDate!! &lt; selectedDate) {&#10;                        selectedEndDate = null&#10;                    }&#10;                } else {&#10;                    // Only allow end date if start date is selected and end date is after start date&#10;                    if (selectedStartDate != null &amp;&amp; selectedDate != null &amp;&amp; selectedDate &gt;= selectedStartDate!!) {&#10;                        selectedEndDate = selectedDate&#10;                    }&#10;                }&#10;                showDateRangePicker = false&#10;            },&#10;            onDismiss = { showDateRangePicker = false },&#10;            initialDate = if (isSelectingStartDate) selectedStartDate else selectedEndDate,&#10;            title = if (isSelectingStartDate) &quot;Select Start Date&quot; else &quot;Select End Date&quot;&#10;        )&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;private fun DatePickerDialog(&#10;    onDateSelected: (Long?) -&gt; Unit,&#10;    onDismiss: () -&gt; Unit,&#10;    initialDate: Long? = null,&#10;    title: String = &quot;Select Date&quot;&#10;) {&#10;    val datePickerState = rememberDatePickerState(&#10;        initialSelectedDateMillis = initialDate&#10;    )&#10;&#10;    DatePickerDialog(&#10;        onDismissRequest = onDismiss,&#10;        confirmButton = {&#10;            TextButton(&#10;                onClick = {&#10;                    onDateSelected(datePickerState.selectedDateMillis)&#10;                }&#10;            ) {&#10;                Text(&quot;OK&quot;)&#10;            }&#10;        },&#10;        dismissButton = {&#10;            TextButton(onClick = onDismiss) {&#10;                Text(&quot;Cancel&quot;)&#10;            }&#10;        }&#10;    ) {&#10;        DatePicker(&#10;            state = datePickerState,&#10;            title = {&#10;                Text(&#10;                    text = title,&#10;                    modifier = Modifier.padding(16.dp)&#10;                )&#10;            }&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>